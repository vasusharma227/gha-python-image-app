name: CI/CD for Dev Environment

on:
  push:
    branches:
    - feat/family
   

env:
  ENV: "dev"
  APP_NAME: image-app
  APP_IMAGE_NAME: image-app
  APP_IMAGE_TAG: dev
  REPOSITORY_URL: https://github.com/vasusharma227/gha-python-image-app.git
  REPOSITORY_NAME: "gha-python-image-app"
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  CONTAINER_REGISTRY_PULL_SECRET: $ {{ secrete.QUAY_DOCKER_CONFIG_JSON_PULL_SECRET }}
  CONTAINER_REGISTRY: ${{secrets.CONTAINER_REGISTRY }} # user "docker.io" for docker hub


jobs:
  build:
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
    - name: checkout
      uses: actions/checkout@v3.3.0

    - name: Set up Python Environment
      uses: action/setup-python@v4.5.0
      with:
        python-version: '3.9'

    - name: Install dependencies 
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Run Unit tests on the app
      run: |
        python -m py_compile app.py
    
    - name: Determine image tags (If not yet present)
      if: env.APP_IMAGE_TAG == ''
      run: |
        echo "APP_IMAGE_TAG=$(echo $GITHUB_SHA | head -c7" >> $GITHUB_ENV
    - name: Build container image
      run: docker built -t ${{ env.CONATAINER_REGISTRY }}/${{env.DOCKER_USERNAME }}/${{env.APP_IMAGE_NAME }}:$(echo $GITHUB_SHA | head -c7)-SNAPSHOT .

    - name: Docker Login
      run: docker login -u ${{ env.DOCKER_USERNAME }} -p ${{ env.DOCKER_PASSWORD }} ${{ env.CONTAINER_REGISTRY }}

    - name: Push image to DockerHub
      run: docker push ${{ env.CONTAINER_REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.APP_IMAGE_NAME }}:$(echo $GITHUB_SHA | head -c7)-SNAPSHOT

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python Environment
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8
    - name: Lint app-code
      run: |
        python --version
#        flake8 --extend-ignore E203,W234,E302,E305,E722

  deploy-to-dev:
    runs-on: ubuntu-latest
    needs: [build, lint]
    environment:
      name: dev
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python Environment
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        pwd && ls -la
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Build and deploy app on Dev-Instance
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DEV_SERVER }}
        username: ${{ secrets.DEV_USERNAME }}
#        password: ${{ secrets.DEV_PASSWORD }}
        key: ${{ secrets.DEV_KEY }}
        script: |
          sudo systemctl stop image-app.service
          sudo rm -Rf ~/app-src
          git clone ${{ env.REPOSITORY_URL }} ~/app-src && cd ~/app-src
          git pull && git checkout dev
          python -m pip install --upgrade pip && pip install -r requirements.txt
          sudo chown root app.py
          sudo systemctl enable image-app.service
          sudo systemctl restart image-app.service
          sudo systemctl status image-app.service  | grep -i "active"
          pwd && ls -la

